appName: "filebot"

# The docker image information for the application
image:
  registry: index.docker.io
  repository: jlesage/filebot
  # If unset use "latest"
  tag: "latest"
  sha: ""
  pullPolicy: IfNotPresent

global:
  # Allow parent charts to override registry hostname
  imageRegistry: ""

ingress:
  # Specify if an ingress resource should be created or not
  enabled: true

app:
  # The storage class to use when provisioning the app config volume
  # this needs to be created manually, null will use the default
  storageClassName: longhorn

  # the volume size to provision for the app database
  configStorage: 1Gi

  # Name of an existing `PersistentVolumeClaim` for the app database
  # NOTE: When set, 'configStorage' and 'storageClassName' are ignored.
  configExistingClaim: ""

  # Enabling this will add gpu.intel.com/i915: "1" to limits and requests
  gpu:
    intel:
      enabled: false

  # Enabling this will add akri.sh/akri-dvddrive: "1" to limits and requests
  dvddrive:
    enabled: false

  resources: {}
  # resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  port: 5800

# A basic image that will convert the configmap to a file in the rclone config volume
# this is ignored if rclone is not enabled
initContainer:
  image:
    registry: index.docker.io
    repository: alpine
    # If unset use latest
    tag: 3.18.0
    sha: ""
    pullPolicy: IfNotPresent

  # A custom script that will be run in an init container to do any setup before the app service starts up
  # This will be run everytime the pod starts, make sure that some mechanism is included to prevent
  # this from running more than once if it should only be run on the first startup.
  # script: ""
  ###
  ### Example init script that will import a pre-existing app database if one has not already been setup
  ### This app database must be available through a URL (or some other mechanism to be pulled into the container)
  script: |-
    #!/bin/sh
    
    # this moves the license file from /mnt/filebot-license-data/license.psm to /config/license.psm only if it's not already there

    echo "Checking if license file exists..."
    if [ -f "/config/license.psm" ]; then
        echo "File /config/license.psm already exists. Exiting."
        exit 0
    fi
    echo "No license file found"

    # If the file doesn't exist, copy license
    echo "Copying /mnt/filebot-license-data/license.psm to /config/license.psm..."
    cp /mnt/filebot-license-data/license.psm /config/license.psm

    # Check if the copy was successful
    if [ $? -eq 0 ]; then
        echo "License file copied successfully."
    else
        echo "Failed to copy the license file."
        exit 1
    fi

# specify your own runtime class name eg use gpu
runtimeClassName: ""

# the settings specific to rclone
rclone:
  # if the rclone sidecar should be created
  enabled: false

  # the rclone image that should be used
  image:
    registry: index.docker.io
    repository: rclone/rclone
    # If unset use latest
    tag: "latest"
    sha: ""
    pullPolicy: IfNotPresent

  # The name of the secret that contains the rclone configuration file.
  # The rclone config key must be called `rclone.conf` in the secret
  #
  # All keys in configSecret will be available in /etc/rclone/. This might
  # be useful if other files are needed, such as a private key for sftp mode.
  configSecret: "rclone-config"

  # the remote drives that should be mounted using rclone
  remotes:
    - name: "diskstation-media"
      remotePath: "/media"
      mountPath: "/output"
      readOnly: false
      additionalArgs:
        - --vfs-cache-mode=writes

  resources: {}
  # resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # If the service account token should be auto mounted
  automountServiceAccountToken: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

statefulSet:
  # optional extra annotations to add to the service resource
  annotations: {}
  # optional extra annotations to add to the pods in the statefulset
  podAnnotations: {}

service:
  type: ClusterIP
  port: 80
  targetPort: 5800
  name: http

  # Port to use when type of service is "NodePort" (80 by default)
  # nodePort: 80

  # when NodePort is used, your app is unable to determine user IP
  # all traffic seems to come from within the cluster
  # setting this to 'Local' will allow your app to determine the actual IP of user.
  # used to determine bitrate for remote transcoding
  # but the pods can only be accessed by the Node IP where the pod is running
  # Read more here: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  # https://access.redhat.com/solutions/7028639
  # externalTrafficPolicy: Local

  # optional extra annotations to add to the service resource
  annotations: {}


nodeSelector:
  worker: "true"

tolerations: []

affinity: {}

priorityClassName: ""

# Common Labels for all resources created by this chart.
commonLabels: {}

# extraEnv: {}
extraEnv:
  KEEP_APP_RUNNING: 1
  AMC_ENABLED: 1
  AMC_INTERVAL: 60 #in seconds
  AMC_INPUT_STABLE_TIME: 30 #in seconds
  AMC_PROCESS_MUSIC: "n"
  AMC_ACTION: "move" #test, copy, move, symlink, hardlink, keeplink, duplicate or clone # default :  move
  AMC_CONFLICT: "auto" #skip, auto
  AMC_MATCH_MODE: "opportunistic" #opportunistic, strict
  AMC_LANG: "German"
  # AMC_MOVIE_FORMAT: "/output/media/movies/{plex.tail}"
  AMC_MOVIE_FORMAT: "/output/media/movies/{~plex.id}"
  # AMC_MOVIE_FORMAT: "/output/media/movies/{localize.deu.n} ({y})/{localize.deu.n} ({y})" #for louis de funes movies
  # AMC_SERIES_FORMAT: "/output/media/tv/{plex.tail}"
  AMC_SERIES_FORMAT: "/output/media/tv/{~plex.id}"
  AMC_CUSTOM_OPTIONS: "--def clean: y" #deletes empty folders after all files are moved
  AMC_INPUT_DIR: "/output/filebot/input"
  AMC_OUTPUT_DIR: "/output/filebot/output"


# Optionally specify additional volume mounts for the app and init containers.
# extraVolumeMounts: []
extraVolumeMounts:
  - name: media-output
    mountPath: /output
  - name: filebot-license-data
    mountPath: /mnt/filebot-license-data

# Optionally specify additional volumes for the pod.
# extraVolumes: []
extraVolumes:
  - name: media-output
    hostPath:
      path: /mnt/media
      type: Directory
  - name: filebot-license-data
    secret:
      secretName: filebot-license

extraContainers: []
# extraContainers:
#  - name: <container name>
#    args:
#      - ...
#    image: <docker images>
#    imagePullPolicy: IfNotPresent
#    resources:
#      limits:
#        memory: 128Mi
#      requests:
#        cpu: 100m
#        memory: 128Mi
#    volumeMounts:
#      - ...